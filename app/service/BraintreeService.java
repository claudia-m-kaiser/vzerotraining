package service;

import com.braintreegateway.*;
import model.BraintreeCustomer;
import com.braintreegateway.WebhookNotification;
import play.Logger;

import java.math.BigDecimal;
import java.util.Calendar;
import java.util.List;
import java.util.Map;

/**
 * Created by clkaiser on 21/02/15.
 */
public class BraintreeService {

    private final BraintreeConfiguration configuration;

    public BraintreeService(BraintreeConfiguration configuration) {
        this.configuration = configuration;
    }

    public String GetToken(){
        String clientToken = configuration.getGateway().clientToken().generate();
        return clientToken;
    }

    public String GetToken(String customerID){
        ClientTokenRequest clientTokenRequest = new ClientTokenRequest()
                .customerId(customerID);
        String clientToken = configuration.getGateway().clientToken().generate(clientTokenRequest);
        return clientToken;
    }

    public void addCustomerToVault(String nonce, BraintreeCustomer btCustomer) {

        //Creating a new blank customer with a stored payment method
        CustomerRequest customerRequest = new CustomerRequest()
                .paymentMethodNonce(nonce)
                .firstName(btCustomer.getFirstName())
                .lastName(btCustomer.getLastname())
                .email(btCustomer.getEmail());

        Result<Customer> customerResult = configuration.getGateway().customer().create(customerRequest);

        Customer customer = customerResult.getTarget();

        //Setting values generated by BT gateway?
        btCustomer.setCustomerID(customer.getId());
        btCustomer.setPaymentMethod(customer.getDefaultPaymentMethod());

        //Adding an address to the customer in the vault.
        AddressRequest addressRequest = new AddressRequest()
                .firstName(btCustomer.getFirstName())
                .lastName(btCustomer.getLastname())
                .streetAddress(btCustomer.getAddress())
                .locality(btCustomer.getSuburb())
                .region(btCustomer.getState())
                .postalCode(btCustomer.getPostcode());

        Result<Address> result = configuration.getGateway().address().create(btCustomer.getCustomerID(), addressRequest);

    }

    public Customer customerSearch(String customerId){
        return configuration.getGateway().customer().find(customerId);
    }

    public ResourceCollection<Customer> getCustomerList(){
        return configuration.getGateway().customer().all();
    }

    ///////////////////////////////////////Transactions////////////////////////////////////

    public Transaction createTransactionWithNonce(String nonce, boolean storeInVault) {

        TransactionRequest transactionRequest = new TransactionRequest()
                .amount(new BigDecimal("1.00"))
                //.merchantAccountId("narnia-books")
                //.serviceFeeAmount(new BigDecimal("10.00"))
                .paymentMethodNonce(nonce)
                .options()
                    .storeInVault(storeInVault)
                    .submitForSettlement(true)
                    //holdInEscrow(false)
                .done();

        Result<Transaction> transactionResult = configuration.getGateway().transaction().sale(transactionRequest);

        return checkTransactionResult(transactionResult);
    }

    public Transaction createTransactionWithToken(String token){
        TransactionRequest transactionRequest = new TransactionRequest()
                .paymentMethodToken(token)
                .amount(new BigDecimal("20.00"));

        Result<Transaction> transactionResult = configuration.getGateway().transaction().sale(transactionRequest);
        return checkTransactionResult(transactionResult);

    }

    public Transaction submitPaymentForSettlement(String transactionId){

        Result<Transaction> transactionResult = configuration.getGateway().transaction().submitForSettlement(transactionId);

        return checkTransactionResult(transactionResult);
    }

    private Transaction checkTransactionResult(Result<Transaction> transactionResult){
        if (transactionResult.isSuccess()) {

            Logger.info("Success!: " + transactionResult.getTarget().getId());
            return transactionResult.getTarget();

        } else {
            Logger.error("Error!: " + transactionResult.getMessage());
            return null;
        }
    }

    public boolean voidAuthorisation(String transactionId){

        Result<Transaction> transactionResult = configuration.getGateway().transaction().voidTransaction(transactionId);

        if (transactionResult.isSuccess()) {
            Logger.debug("Transaction voided successfully");
            return true;
        } else {
            for (ValidationError error : transactionResult.getErrors().getAllDeepValidationErrors()) {
                Logger.debug(error.getMessage());
            }
            return false;
        }


    }

    public Transaction cloneTransaction(String transactionId){

        TransactionCloneRequest request = new TransactionCloneRequest()
                .amount(new BigDecimal("10.00"))
                .options()
                .submitForSettlement(true)
                .done();

        Result<Transaction> result = configuration.getGateway().transaction().
                cloneTransaction(transactionId, request);

        return result.getTransaction();
    }

    public void createPaymentMethodForExistingCustomer(String customerId, String nonce){

        PaymentMethodRequest request = new PaymentMethodRequest()
                .customerId(customerId)
                .paymentMethodNonce(nonce);

        Result<? extends PaymentMethod> result = configuration.getGateway().paymentMethod().create(request);

        if (result.isSuccess()){
            Logger.debug("Payment method added successfully. New payment method token: " + result.getTarget().getToken());
        }else{
            Logger.error(result.getErrors().toString());
        }

    }

    public ResourceCollection<Transaction> getTransactionList(){

        TransactionSearchRequest request = new TransactionSearchRequest()
                .settledAt()
                .lessThanOrEqualTo(Calendar.getInstance());

        ResourceCollection<Transaction> collection = configuration.getGateway().transaction().search(request);

        return collection;
    }

    ////////////////////////////////////////////Subscription///////////////////////////////////////////

    public Subscription createSubscription(String token, String planId){

        SubscriptionRequest subscriptionRequest = new SubscriptionRequest()
                .paymentMethodToken(token)
                .planId(planId)
                .trialPeriod(false);

        Result<Subscription> result = configuration.getGateway().subscription().create(subscriptionRequest);

        return result.getTarget();
    }

    ////////////////////////////////////////////Webhooks///////////////////////////////////////////

    public String getWebhookVerificationResponse(String btChallenge){
        return configuration.getGateway().webhookNotification().verify(btChallenge);

    }

    public WebhookNotification parseWebhookNotification(String bt_signature, String bt_payload){

        WebhookNotification webhookNotification = configuration.getGateway().webhookNotification().parse(bt_signature,bt_payload);

        return webhookNotification;
    }

    ////////////////////////////////////////////Marketplaces///////////////////////////////////////////

    public void onboardSubmerchantAccount(Map submerchant){

        String firstName = submerchant.get("FirstName").toString();

        MerchantAccountRequest request = new MerchantAccountRequest().
                individual().
                firstName("Jane").
                lastName("Doe").
                email("claudia.m.kaiser@gmail.com").
                phone("6145551234").
                dateOfBirth("1981-11-19").
                address().
                        streetAddress("111 Main St").
                        locality("Chicago").
                         region("IL").
                        postalCode("60622").
                    done().
                done().
                funding().
                    descriptor("Blue Ladders").
                    destination(MerchantAccount.FundingDestination.EMAIL).
                    email("claudia.m.kaiser@gmail.com").
                done().
                tosAccepted(true).
                masterMerchantAccountId("v4ygp9cd2mj42fgv").
                id("narnia-books");

        Result<MerchantAccount> result = configuration.getGateway().merchantAccount().create(request);

        Logger.debug(result.getMessage());
    }

    ////////////////////////////////////////////Reporting///////////////////////////////////////////

    public List<Map<String,String>> generateSettlementBatch(Calendar date){

        Result<SettlementBatchSummary> result = configuration.getGateway()
                .settlementBatchSummary()
                .generate(date);

        if (result.isSuccess()) {
            List<Map<String,String>> records = result.getTarget().getRecords();
            return records;
        }else{
            return null;
        }

    }
}
