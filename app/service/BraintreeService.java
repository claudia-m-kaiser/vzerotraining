package service;

import com.braintreegateway.*;
import model.BraintreeCustomer;
import model.BraintreePayment;
import com.braintreegateway.WebhookNotification;
import play.Logger;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;

/**
 * Created by clkaiser on 21/02/15.
 */
public class BraintreeService {

    private final BraintreeConfiguration configuration;

    public BraintreeService(BraintreeConfiguration configuration) {
        this.configuration = configuration;
    }

    public String GetToken(){
        String clientToken = configuration.getGateway().clientToken().generate();
        return clientToken;
    }

    public String GetToken(String customerID){
        ClientTokenRequest clientTokenRequest = new ClientTokenRequest()
                .customerId(customerID);
        String clientToken = configuration.getGateway().clientToken().generate(clientTokenRequest);
        return clientToken;
    }

    public void addCustomerToVault(String nonce, BraintreeCustomer btCustomer) {

        //Creating a new blank customer with a stored payment method
        CustomerRequest customerRequest = new CustomerRequest()
                .paymentMethodNonce(nonce)
                .firstName(btCustomer.getFirstName())
                .lastName(btCustomer.getLastname())
                .email(btCustomer.getEmail());

        Result<Customer> customerResult = configuration.getGateway().customer().create(customerRequest);

        Customer customer = customerResult.getTarget();

        //Setting values generated by BT gateway?
        btCustomer.setCustomerID(customer.getId());
        btCustomer.setPaymentMethod(customer.getDefaultPaymentMethod());

        //Adding an address to the customer in the vault.
        AddressRequest addressRequest = new AddressRequest()
                .firstName(btCustomer.getFirstName())
                .lastName(btCustomer.getLastname())
                .streetAddress(btCustomer.getAddress())
                .locality(btCustomer.getSuburb())
                .region(btCustomer.getState())
                .postalCode(btCustomer.getPostcode());

        Result<Address> result = configuration.getGateway().address().create(btCustomer.getCustomerID(), addressRequest);

    }

    public Customer customerSearch(String customerId){
        return configuration.getGateway().customer().find(customerId);
    }

    public BraintreePayment CreatePaymentWithNonce(String nonce) {

        TransactionRequest transactionRequest = new TransactionRequest()
                .amount(new BigDecimal("1.00"))
                .paymentMethodNonce(nonce)
                .options()
                .storeInVault(false)
                .done();

        Result<Transaction> transactionResult = configuration.getGateway().transaction().sale(transactionRequest);

        if (transactionResult.isSuccess()) {

            BraintreePayment btPayment = new BraintreePayment(transactionResult.getTarget());
            Logger.info("Success!: ", btPayment.getTransactionID());
            return btPayment;

        } else {
            Logger.info(transactionResult.getMessage());
            return null;
        }
    }

    public Transaction submitPaymentForSettlement(String transactionId){

        Result<Transaction> result = configuration.getGateway().transaction().submitForSettlement(transactionId);

        return result.getTransaction();
    }

    public ResourceCollection<Customer> getCustomerList(){
        return configuration.getGateway().customer().all();
    }

    public boolean voidAuthorisation(String transactionId){

        Result<Transaction> result = configuration.getGateway().transaction().voidTransaction(transactionId);

        if (result.isSuccess()) {
            Logger.debug("Transaction voided successfully");
            return true;
        } else {
            for (ValidationError error : result.getErrors().getAllDeepValidationErrors()) {
                Logger.debug(error.getMessage());
            }
            return false;
        }


    }

    public Transaction cloneTransaction(String transactionId){

        TransactionCloneRequest request = new TransactionCloneRequest()
                .amount(new BigDecimal("10.00"))
                .options()
                .submitForSettlement(true)
                .done();

        Result<Transaction> result = configuration.getGateway().transaction().
                cloneTransaction(transactionId, request);

        return result.getTransaction();
    }

    public BraintreePayment CreatePaymentForNewCustomerAndAddToVault(String nonce, String firstName, String lastName, String email) {

        TransactionRequest transactionRequest = new TransactionRequest()
                .paymentMethodNonce(nonce)
                .customer()
                .firstName(firstName)
                .lastName(lastName)
                .email(email)
                .done()
                .amount(new BigDecimal("20.00"))
                .options()
                .storeInVault(true)
                .done();

        Result<Transaction> transactionResult = configuration.getGateway().transaction().sale(transactionRequest);

        if (transactionResult.isSuccess()) {
            BraintreePayment btPayment = new BraintreePayment(transactionResult.getTarget());
            Logger.info("Success!: ", btPayment.getTransactionID());
            return btPayment;

        } else {
            Logger.info(transactionResult.getMessage());
            return null;
        }
    }

    public void CreatePaymentWithSavedPaymentMethod(String token){
        TransactionRequest transactionRequest = new TransactionRequest()
                .paymentMethodToken(token)
                .amount(new BigDecimal("20.00"));

        Result<Transaction> result = configuration.getGateway().transaction().sale(transactionRequest);
    }

    public void createPaymentMethodForExistingCustomer(String customerId, String nonce){

        PaymentMethodRequest request = new PaymentMethodRequest()
                .customerId(customerId)
                .paymentMethodNonce(nonce);

        Result<? extends PaymentMethod> result = configuration.getGateway().paymentMethod().create(request);

        if (result.isSuccess()){
            Logger.debug("Payment method added successfully. New payment method token: " + result.getTarget().getToken());
        }else{
            Logger.error(result.getErrors().toString());
        }

    }

    public String getWebhookVerificationResponse(String btChallenge){
        return configuration.getGateway().webhookNotification().verify(btChallenge);

    }

    public String parseWebhookNotification(String bt_signature, String bt_payload){

        WebhookNotification webhookNotification = configuration.getGateway().webhookNotification().parse(bt_signature,bt_payload);

        SimpleDateFormat dateFormat = new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss Z");
        String date = dateFormat.format(webhookNotification.getTimestamp().getTime());

        return "Date: "+ date + " Type: " + webhookNotification.getKind();
    }

}
